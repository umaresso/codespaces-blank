//SPDX-License-Identifier: MIT
pragma solidity 0.8.6;

/* 

The Main smart contract behind website renting.

what is a Deployment ?

A collection sale or whitelist is called deployment.

Websites can be rented for either sale of collection ( we created it in 'create sale' phase using 'SaleFactory.sol' )
or Websites can be rented for whitelisting of collection ( we created whitelist in 'create whitelist' phase using 'WhitelistFactory.sol' )

so deployment refers to the smart contract address that stores the information about the collection.
that smart contract is responsible for whitelisting or sale of the collection based upon it's type.




*/
contract WebsiteRent {
    mapping(string => address) public websiteToDeployment; // which smart contract has rented this website
    mapping(address => string) public deploymentToWebsite; // which website is rented for a particular deployment

    mapping(string => uint256) prices; // price of renting each Dapp
    mapping(string => uint256) public rentTime; // for how much time the Dapp is rented currently
    mapping(string => bool) public websiteExists; // keeping track of all the websites available on platform that can be rented
    mapping(string => address) public websiteOwner; // track of developers of website

    // THIS variable is really the core of our platform's 50% functioning
    // we use IPFS for storage purpose , leveraging the decentrralization of storage and speed for better user experience.
    // each time a website is uploaded on our platform , the meta-data of available dapps + new dapp is stored on IPFS with a new link.
    // this link is updated each time a new dapp is uploaded on our platform
    string public allWebsitesIPFSCid;

    // The Pkatform owner address who can receive the funds from smart contract that are generated by deducting the fee during each dapp renting
    address PLATFORM_BENEFICIARY;

    uint256 rentFeePercentage = 5; // 5% fee on each rent of a DAPP

    constructor(address _PLATFORM_BENEFICIARY) {
        PLATFORM_BENEFICIARY = _PLATFORM_BENEFICIARY;
    }

    // Modifiers are conditions that are tested before execution of any function they are applied on

    modifier onlyWebsiteOwner(string memory website) {
        require(msg.sender == websiteOwner[website]);
        _;
    }
    modifier onlyBeneficiary() {
        require(msg.sender == PLATFORM_BENEFICIARY);
        _;
    }
    modifier ifWebsiteExists(string memory website) {
        require(
            websiteExists[website],
            "The Website does not exist on RentWeb3"
        );
        _;
    }


    /**
        Function to rent a Blockchain based wesbite ( Dapp ) for your Collection's sale or whitelisting.
        We deduct just 5% fee from both the Creator ( who wants to rent this dapp ) and developer of the dapp
        because we are giving them unlimited revenue generation chance by building only once and earning lifetime.

        that's how we work  :)

     */
    function rentDapp(
        string memory website,
        address deployment,
        uint256 rentDays
    ) public payable ifWebsiteExists(website) {
        require(
            rentTime[website] < block.timestamp,
            "Website is already rented"
        );
        require(msg.value >= prices[website],"Insufficient Funds Sent");
        rentTime[website] = block.timestamp + (60 * rentDays); //replace 60 with 86400 in production but right now we are testing it with 1 day = 1 minute
        websiteToDeployment[website] = deployment;
        deploymentToWebsite[deployment] = website;
        
        uint256 fee = (prices[website] * 5) / 100;
        
        payable(PLATFORM_BENEFICIARY).transfer(fee);
        payable(websiteOwner[website]).transfer(prices[website]);
    }

    // Self-Explanatory
    function getDappRentPrice(string memory website)
        public
        view
        ifWebsiteExists(website)
        returns (uint256)
    {
        uint256 rentingFee = (prices[website] * (5)) / 100;
        return prices[website] + rentingFee;
    }

    // The Website owner can update the price of dapp to rent for
    function updateDappRentPrice(string memory website, uint256 price)
        public
        ifWebsiteExists(website)
        onlyWebsiteOwner(website)
    {
        prices[website] = price;
    }

    function getCurrentDeployment(string memory website)
        public
        returns (address)
    {
        if (rentTime[website] > block.timestamp)
            return websiteToDeployment[website];
        rentTime[website] = 0;
        websiteToDeployment[website] = address(0x0);
        return address(0x0);
    }

    function uploadWebsite(
        string memory website,
        uint256 price,
        address owner
    ) public {
        require(websiteExists[website] == false, "website already exists");
        websiteExists[website] = true;
        websiteOwner[website] = owner;
        websiteToDeployment[website] = address(0x0);
        prices[website] = price;
    }
// need to deploy
    function updateRentFee(uint256 Percentage) external onlyBeneficiary {
        rentFeePercentage = Percentage;
    }

    function updateWebsitesIPFSLink(string memory cid) public {
        allWebsitesIPFSCid = cid;
    }
}
